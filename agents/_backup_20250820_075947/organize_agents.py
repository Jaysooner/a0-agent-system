#!/usr/bin/env python3
"""
organize_agents.py

Restructures loose files in a0/agents into per-agent folders with
subfolders: prompts/, tools/, extensions/.

- Creates a timestamped backup of moved files under a0/agents/_backup_<ts>/
- Idempotent: skips files already placed correctly
- Heuristics to infer agent name + destination subfolder
- Optional mapping file to override heuristics

Usage:
  python organize_agents.py --root /workspace/a0/agents
  python organize_agents.py --root /workspace/a0/agents --mapping /path/to/pattern_mapping.json
"""
import argparse, re, shutil, sys, time
from pathlib import Path
from typing import Dict, Tuple

PROMPTS = "prompts"
TOOLS = "tools"
EXTENSIONS = "extensions"

def snake(s: str) -> str:
    # Convert CamelCase or mixed to snake_case
    s = re.sub(r'[\s\-]+', '_', s)
    s = re.sub(r'([a-z0-9])([A-Z])', r'\1_\2', s)
    s = s.replace('__','_')
    return s.lower()

def infer_agent_and_kind(filename: str) -> Tuple[str, str]:
    """
    Heuristics to guess agent folder and subfolder (kind).
    Returns (agent_name, kind) where kind in {PROMPTS, TOOLS, EXTENSIONS}
    """
    stem = Path(filename).stem

    # Prefer explicit prefixes, e.g., agentmail_worker.md -> agentmail
    m = re.match(r'^(agent[a-z0-9]+)', stem, re.IGNORECASE)
    if m:
        agent = m.group(1).lower()
    else:
        # For CamelCase like SoftwareEngineer.json -> software_engineer
        agent = snake(stem)

    # Decide kind by extension & keywords
    ext = Path(filename).suffix.lower()
    lower = filename.lower()

    if ext == ".md":
        kind = PROMPTS
    elif ext == ".py":
        kind = EXTENSIONS if "extension" in lower or lower.startswith("_") else TOOLS
    elif ext == ".json":
        # json tools often include ".tool" or "_tool"
        if ".tool" in lower or "_tool" in lower or lower.endswith("tool.json"):
            kind = TOOLS
        else:
            # treat as prompts/config
            kind = PROMPTS
    else:
        kind = PROMPTS

    return agent, kind

def apply_mapping(filename: str, mapping: Dict[str, Dict[str,str]]):
    """Allow user overrides via regex pattern mapping."""
    for pattern, dest in mapping.items():
        if re.search(pattern, filename, re.IGNORECASE):
            agent = dest.get("agent") or infer_agent_and_kind(filename)[0]
            kind = dest.get("kind") or infer_agent_and_kind(filename)[1]
            return agent, kind
    return None

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--root", required=True, help="Path to a0/agents directory")
    ap.add_argument("--mapping", help="Optional JSON mapping file of {regex: {agent, kind}}")
    args = ap.parse_args()

    root = Path(args.root).resolve()
    if not root.exists():
        print(f"[ERROR] Root path does not exist: {root}")
        sys.exit(1)

    mapping = {}
    if args.mapping:
        import json
        with open(args.mapping, "r", encoding="utf-8") as f:
            mapping = json.load(f)

    ts = time.strftime("%Y%m%d_%H%M%S")
    backup_dir = root / f"_backup_{ts}"
    moved = []

    # Do not descend into existing agent folders; only handle loose files in root
    skip_dirs = set([PROMPTS, TOOLS, EXTENSIONS, "_backup"])  # legacy
    for p in root.iterdir():
        if p.is_dir():
            continue
        if not p.is_file():
            continue

        # Already well-placed files don't live in root; root loose files only
        fname = p.name

        # Allow user mapping first
        override = apply_mapping(fname, mapping) if mapping else None
        if override:
            agent, kind = override
        else:
            agent, kind = infer_agent_and_kind(fname)

        agent_dir = root / agent
        dest_dir = agent_dir / kind
        dest_dir.mkdir(parents=True, exist_ok=True)

        dest = dest_dir / fname
        if dest.exists():
            # Already moved previously
            print(f"[SKIP] {fname} already exists at {dest}")
            continue

        # Make backup copy before moving
        backup_dir.mkdir(parents=True, exist_ok=True)
        shutil.copy2(p, backup_dir / fname)

        # Move file
        shutil.move(str(p), str(dest))
        moved.append((fname, str(dest)))

    # Create README for the agent folders we touched
    touched_agents = sorted({Path(d).parts[-3] for _, d in moved if len(Path(d).parts) >= 3})
    for agent in touched_agents:
        adir = root / agent
        readme = adir / "README.md"
        if not readme.exists():
            readme.write_text(
f"""# {agent}

This agent follows the standard Agent Zero layout:

- `prompts/` – role/system prompts, tool system prompts, configs
- `tools/` – Python tools (*.py) used by this agent
- `extensions/` – lifecycle/agent extensions (*.py)

> This README was autogenerated by organize_agents.py on {ts}.
""",
            encoding="utf-8"
            )

    print(f"[DONE] Moved {len(moved)} files.")
    for fname, dest in moved:
        print(f"  - {fname} -> {dest}")
    if moved:
        print(f"[INFO] Backup copies saved under: {backup_dir}")
    else:
        print("[INFO] No loose files were moved.")

if __name__ == "__main__":
    main()
